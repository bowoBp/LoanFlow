// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BcryptInterface is an autogenerated mock type for the BcryptInterface type
type BcryptInterface struct {
	mock.Mock
}

// ComparePass provides a mock function with given fields: hashPass, pass
func (_m *BcryptInterface) ComparePass(hashPass []byte, pass []byte) bool {
	ret := _m.Called(hashPass, pass)

	if len(ret) == 0 {
		panic("no return value specified for ComparePass")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(hashPass, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateHashValue provides a mock function with given fields: secretKey, uniqueID, bitLen
func (_m *BcryptInterface) GenerateHashValue(secretKey string, uniqueID string, bitLen int) (string, error) {
	ret := _m.Called(secretKey, uniqueID, bitLen)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHashValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (string, error)); ok {
		return rf(secretKey, uniqueID, bitLen)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) string); ok {
		r0 = rf(secretKey, uniqueID, bitLen)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(secretKey, uniqueID, bitLen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPass provides a mock function with given fields: pass
func (_m *BcryptInterface) HasPass(pass string) string {
	ret := _m.Called(pass)

	if len(ret) == 0 {
		panic("no return value specified for HasPass")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pass)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewBcryptInterface creates a new instance of BcryptInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBcryptInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BcryptInterface {
	mock := &BcryptInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
