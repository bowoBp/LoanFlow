// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domians "github.com/bowoBp/LoanFlow/internal/domain"
	dto "github.com/bowoBp/LoanFlow/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// LoanRepoInterface is an autogenerated mock type for the LoanRepoInterface type
type LoanRepoInterface struct {
	mock.Mock
}

// ApproveDetail provides a mock function with given fields: ctx, detail
func (_m *LoanRepoInterface) ApproveDetail(ctx context.Context, detail *domians.LoanApprovalDetail) error {
	ret := _m.Called(ctx, detail)

	if len(ret) == 0 {
		panic("no return value specified for ApproveDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.LoanApprovalDetail) error); ok {
		r0 = rf(ctx, detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *LoanRepoInterface) CreateLoan(ctx context.Context, loan *domians.Loan) (*domians.Loan, error) {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 *domians.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.Loan) (*domians.Loan, error)); ok {
		return rf(ctx, loan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domians.Loan) *domians.Loan); ok {
		r0 = rf(ctx, loan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domians.Loan) error); ok {
		r1 = rf(ctx, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoanState provides a mock function with given fields: ctx, loanState
func (_m *LoanRepoInterface) CreateLoanState(ctx context.Context, loanState *domians.LoanStateHistory) error {
	ret := _m.Called(ctx, loanState)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoanState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.LoanStateHistory) error); ok {
		r0 = rf(ctx, loanState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisburseDetail provides a mock function with given fields: ctx, disbursed
func (_m *LoanRepoInterface) DisburseDetail(ctx context.Context, disbursed *domians.LoanDisbursementDetail) error {
	ret := _m.Called(ctx, disbursed)

	if len(ret) == 0 {
		panic("no return value specified for DisburseDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.LoanDisbursementDetail) error); ok {
		r0 = rf(ctx, disbursed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoanByID provides a mock function with given fields: ctx, loanID
func (_m *LoanRepoInterface) GetLoanByID(ctx context.Context, loanID uint) (*domians.Loan, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByID")
	}

	var r0 *domians.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domians.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domians.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoans provides a mock function with given fields: ctx, query
func (_m *LoanRepoInterface) GetLoans(ctx context.Context, query dto.GetListQuery) ([]domians.Loan, int64, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetLoans")
	}

	var r0 []domians.Loan
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetListQuery) ([]domians.Loan, int64, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetListQuery) []domians.Loan); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domians.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetListQuery) int64); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.GetListQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvestLoan provides a mock function with given fields: ctx, investLoan
func (_m *LoanRepoInterface) InvestLoan(ctx context.Context, investLoan *domians.LoanInvestor) error {
	ret := _m.Called(ctx, investLoan)

	if len(ret) == 0 {
		panic("no return value specified for InvestLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.LoanInvestor) error); ok {
		r0 = rf(ctx, investLoan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLoan provides a mock function with given fields: ctx, loan, updateData
func (_m *LoanRepoInterface) UpdateLoan(ctx context.Context, loan *domians.Loan, updateData map[string]interface{}) error {
	ret := _m.Called(ctx, loan, updateData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.Loan, map[string]interface{}) error); ok {
		r0 = rf(ctx, loan, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoanRepoInterface creates a new instance of LoanRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepoInterface {
	mock := &LoanRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
