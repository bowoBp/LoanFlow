// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Environment is an autogenerated mock type for the Environment type
type Environment struct {
	mock.Mock
}

// CheckFlag provides a mock function with given fields: flag
func (_m *Environment) CheckFlag(flag string) bool {
	ret := _m.Called(flag)

	if len(ret) == 0 {
		panic("no return value specified for CheckFlag")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *Environment) Get(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUint provides a mock function with given fields: key, defaultValue
func (_m *Environment) GetUint(key string, defaultValue uint) uint {
	ret := _m.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetUint")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, uint) uint); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// NewEnvironment creates a new instance of Environment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Environment {
	mock := &Environment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
