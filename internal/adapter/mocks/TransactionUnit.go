// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TransactionUnit is an autogenerated mock type for the TransactionUnit type
type TransactionUnit[T interface{}] struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *TransactionUnit[T]) Begin() (T, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func() (T, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// End provides a mock function with given fields: err
func (_m *TransactionUnit[T]) End(err error) error {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for End")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionUnit creates a new instance of TransactionUnit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionUnit[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionUnit[T] {
	mock := &TransactionUnit[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
