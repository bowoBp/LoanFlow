// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/bowoBp/LoanFlow/internal/dto"
	mock "github.com/stretchr/testify/mock"

	time "time"

	user "github.com/bowoBp/LoanFlow/internal/services/user"
)

// ControllerInterface is an autogenerated mock type for the ControllerInterface type
type ControllerInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ControllerInterface) GetAll(ctx context.Context) (*dto.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dto.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dto.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields: id, userName, created
func (_m *ControllerInterface) GetCurrent(id interface{}, userName interface{}, created interface{}) (*dto.Response, error) {
	ret := _m.Called(id, userName, created)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrent")
	}

	var r0 *dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}) (*dto.Response, error)); ok {
		return rf(id, userName, created)
	}
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}) *dto.Response); ok {
		r0 = rf(id, userName, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, interface{}, interface{}) error); ok {
		r1 = rf(id, userName, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, userName, password
func (_m *ControllerInterface) Login(ctx context.Context, userName string, password string) (user.SuccessLoginUser, error) {
	ret := _m.Called(ctx, userName, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 user.SuccessLoginUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (user.SuccessLoginUser, error)); ok {
		return rf(ctx, userName, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) user.SuccessLoginUser); ok {
		r0 = rf(ctx, userName, password)
	} else {
		r0 = ret.Get(0).(user.SuccessLoginUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, id, createdAt, token, role, name
func (_m *ControllerInterface) RefreshToken(ctx context.Context, id uint, createdAt time.Time, token string, role string, name string) (user.SuccessLoginUser, error) {
	ret := _m.Called(ctx, id, createdAt, token, role, name)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 user.SuccessLoginUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time, string, string, string) (user.SuccessLoginUser, error)); ok {
		return rf(ctx, id, createdAt, token, role, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time, string, string, string) user.SuccessLoginUser); ok {
		r0 = rf(ctx, id, createdAt, token, role, name)
	} else {
		r0 = ret.Get(0).(user.SuccessLoginUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, time.Time, string, string, string) error); ok {
		r1 = rf(ctx, id, createdAt, token, role, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *ControllerInterface) Register(ctx context.Context, payload user.RegisterUser) (*dto.Response, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.RegisterUser) (*dto.Response, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.RegisterUser) *dto.Response); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.RegisterUser) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, id
func (_m *ControllerInterface) RevokeToken(ctx context.Context, id uint) (*dto.Response, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 *dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*dto.Response, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *dto.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewControllerInterface creates a new instance of ControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControllerInterface {
	mock := &ControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
