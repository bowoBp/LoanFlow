// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// AuthInterface is an autogenerated mock type for the AuthInterface type
type AuthInterface struct {
	mock.Mock
}

// Authentication provides a mock function with given fields:
func (_m *AuthInterface) Authentication() gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Authentication")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Authorize provides a mock function with given fields: roles
func (_m *AuthInterface) Authorize(roles ...string) gin.HandlerFunc {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(...string) gin.HandlerFunc); ok {
		r0 = rf(roles...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// NewAuthInterface creates a new instance of AuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthInterface {
	mock := &AuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
