// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domians "github.com/bowoBp/LoanFlow/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepoInterface is an autogenerated mock type for the UserRepoInterface type
type UserRepoInterface struct {
	mock.Mock
}

// CheckEmail provides a mock function with given fields: ctx, userName
func (_m *UserRepoInterface) CheckEmail(ctx context.Context, userName string) (*domians.User, error) {
	ret := _m.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for CheckEmail")
	}

	var r0 *domians.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domians.User, error)); ok {
		return rf(ctx, userName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domians.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRefreshToken provides a mock function with given fields: ctx, id
func (_m *UserRepoInterface) CheckRefreshToken(ctx context.Context, id uint) (*domians.RefreshToken, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CheckRefreshToken")
	}

	var r0 *domians.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domians.RefreshToken, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domians.RefreshToken); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRefreshTokenByUserID provides a mock function with given fields: ctx, userID
func (_m *UserRepoInterface) DeleteRefreshTokenByUserID(ctx context.Context, userID uint) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshTokenByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields: ctx
func (_m *UserRepoInterface) GetAllUser(ctx context.Context) ([]domians.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 []domians.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domians.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domians.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domians.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreRefreshToken provides a mock function with given fields: ctx, token
func (_m *UserRepoInterface) StoreRefreshToken(ctx context.Context, token *domians.RefreshToken) (*domians.RefreshToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for StoreRefreshToken")
	}

	var r0 *domians.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.RefreshToken) (*domians.RefreshToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domians.RefreshToken) *domians.RefreshToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domians.RefreshToken) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUser provides a mock function with given fields: ctx, cust
func (_m *UserRepoInterface) StoreUser(ctx context.Context, cust *domians.User) (*domians.User, error) {
	ret := _m.Called(ctx, cust)

	if len(ret) == 0 {
		panic("no return value specified for StoreUser")
	}

	var r0 *domians.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.User) (*domians.User, error)); ok {
		return rf(ctx, cust)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domians.User) *domians.User); ok {
		r0 = rf(ctx, cust)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domians.User) error); ok {
		r1 = rf(ctx, cust)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRefreshToken provides a mock function with given fields: ctx, token
func (_m *UserRepoInterface) UpdateRefreshToken(ctx context.Context, token *domians.RefreshToken) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domians.RefreshToken) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepoInterface creates a new instance of UserRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepoInterface {
	mock := &UserRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
