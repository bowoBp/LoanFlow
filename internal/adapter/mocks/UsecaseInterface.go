// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domians "github.com/bowoBp/LoanFlow/internal/domain"
	dto "github.com/bowoBp/LoanFlow/internal/dto"

	loan "github.com/bowoBp/LoanFlow/internal/services/loan"

	mock "github.com/stretchr/testify/mock"
)

// UsecaseInterface is an autogenerated mock type for the UsecaseInterface type
type UsecaseInterface struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, loanID, userID, payload
func (_m *UsecaseInterface) ApproveLoan(ctx context.Context, loanID uint, userID uint, payload loan.ApproveLoanRequest) error {
	ret := _m.Called(ctx, loanID, userID, payload)

	if len(ret) == 0 {
		panic("no return value specified for ApproveLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, loan.ApproveLoanRequest) error); ok {
		r0 = rf(ctx, loanID, userID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoan provides a mock function with given fields: ctx, payload
func (_m *UsecaseInterface) CreateLoan(ctx context.Context, payload loan.CreateLoanRequest) error {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, loan.CreateLoanRequest) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisburseLoan provides a mock function with given fields: ctx, loanID, userID, payload
func (_m *UsecaseInterface) DisburseLoan(ctx context.Context, loanID uint, userID uint, payload loan.DisburseLoanRequest) error {
	ret := _m.Called(ctx, loanID, userID, payload)

	if len(ret) == 0 {
		panic("no return value specified for DisburseLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, loan.DisburseLoanRequest) error); ok {
		r0 = rf(ctx, loanID, userID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoan provides a mock function with given fields: ctx, loanID
func (_m *UsecaseInterface) GetLoan(ctx context.Context, loanID uint) (*domians.Loan, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoan")
	}

	var r0 *domians.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domians.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domians.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domians.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoans provides a mock function with given fields: ctx, query
func (_m *UsecaseInterface) GetLoans(ctx context.Context, query dto.GetListQuery) ([]domians.Loan, int64, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetLoans")
	}

	var r0 []domians.Loan
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetListQuery) ([]domians.Loan, int64, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetListQuery) []domians.Loan); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domians.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetListQuery) int64); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.GetListQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreInvest provides a mock function with given fields: ctx, loanID, userID, payload
func (_m *UsecaseInterface) StoreInvest(ctx context.Context, loanID uint, userID uint, payload loan.InvestLoanRequest) error {
	ret := _m.Called(ctx, loanID, userID, payload)

	if len(ret) == 0 {
		panic("no return value specified for StoreInvest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, loan.InvestLoanRequest) error); ok {
		r0 = rf(ctx, loanID, userID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecaseInterface creates a new instance of UsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseInterface {
	mock := &UsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
